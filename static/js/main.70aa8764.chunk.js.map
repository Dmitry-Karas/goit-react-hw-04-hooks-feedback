{"version":3,"sources":["components/Statistics/Statistics.styles.jsx","components/Statistics/Statistics.jsx","components/Section/Section.styles.jsx","components/Section/Section.jsx","components/Container/Container.styles.jsx","components/Container/Container.jsx","components/Button/Button.styles.jsx","components/Button/Button.jsx","components/FeedbackOptions/FeedbackOptions.styles.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.styles.jsx","components/Notification/Notification.jsx","App.jsx","index.js"],"names":["List","styled","ul","Item","li","Text","p","props","good","neutral","bad","Statistics","total","positivePercentage","percentage","Wrapper","section","Title","h2","Section","title","children","div","Container","Btn","button","Button","feedback","onClick","type","data-feedback","size","color","style","marginBottom","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","option","Notification","App","useState","setGood","setNeutral","setBad","countTotalFeedback","totalFeedback","Math","round","countPositiveFeedbackPercentage","e","currentTarget","dataset","prevState","message","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70aa8764.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const Item = styled.li`\n  &:not(:last-child) {\n    margin-right: 50px;\n  }\n`;\n\nexport const Text = styled.p`\n  display: flex;\n  align-items: center;\n  font-size: 24px;\n  font-weight: 500;\n  color: ${(props) =>\n    (props.good && \"limegreen\") ||\n    (props.neutral && \"darkgrey\") ||\n    (props.bad && \"tomato\") ||\n    \"cornflowerblue\"};\n\n  & svg {\n    margin-right: 5px;\n  }\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ImHappy, ImNeutral, ImAngry, ImCool, ImGrin } from \"react-icons/im\";\nimport { List, Item, Text } from \"./Statistics.styles\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage = 0 }) => {\n  return (\n    <List>\n      <Item>\n        <Text good>\n          <ImHappy /> Good: {good}\n        </Text>\n      </Item>\n      <Item>\n        <Text neutral>\n          <ImNeutral /> Neutral: {neutral}\n        </Text>\n      </Item>\n      <Item>\n        <Text bad>\n          <ImAngry /> Bad: {bad}\n        </Text>\n      </Item>\n      <Item>\n        <Text total>\n          <ImCool /> Total: {total}\n        </Text>\n      </Item>\n      <Item>\n        <Text percentage>\n          <ImGrin />\n          Positive: {positivePercentage} %\n        </Text>\n      </Item>\n    </List>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.section`\n  padding: 40px 0;\n`;\nexport const Title = styled.h2`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 50px;\n  margin-left: auto;\n  margin-right: auto;\n\n  text-transform: uppercase;\n  font-size: 32px;\n  text-align: center;\n\n  & svg {\n    margin-left: 20px;\n  }\n`;\n","import PropTypes from \"prop-types\";\nimport { Wrapper, Title } from \"./Section.styles\";\nimport { ImBubbles3, ImStatsBars } from \"react-icons/im\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <Wrapper>\n      {title && (\n        <Title>\n          {title}\n          {title === \"Please leave feedback\" && <ImBubbles3 />}\n          {title === \"Statistics\" && <ImStatsBars />}\n        </Title>\n      )}\n\n      {children}\n    </Wrapper>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  width: 1024px;\n  margin: 0 auto;\n  padding: 0 30px;\n`;\n","import PropTypes from \"prop-types\";\nimport { Wrapper } from \"./Container.styles\";\n\nconst Container = ({ children }) => {\n  return <Wrapper>{children}</Wrapper>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import styled from \"@emotion/styled\";\n\nexport const Btn = styled.button`\n  width: 150px;\n  padding: 5px 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border: none;\n  cursor: pointer;\n  outline: none;\n\n  text-transform: capitalize;\n  font-size: 18px;\n  font-weight: 500;\n\n  background-color: transparent;\n  transition: all 250ms ease-in-out;\n\n  &:hover,\n  &:focus-visible {\n    transform: scale(1.2);\n  }\n`;\n","import PropTypes from \"prop-types\";\nimport { Btn } from \"./Button.styles\";\nimport { ImHappy, ImNeutral, ImAngry } from \"react-icons/im\";\n\nconst Button = ({ feedback, onClick }) => {\n  return (\n    <Btn type=\"button\" data-feedback={feedback} onClick={onClick}>\n      {feedback === \"good\" && (\n        <ImHappy size=\"100\" color=\"limegreen\" style={{ marginBottom: 10 }} />\n      )}\n      {feedback === \"neutral\" && (\n        <ImNeutral size=\"100\" color=\"darkgrey\" style={{ marginBottom: 10 }} />\n      )}\n      {feedback === \"bad\" && (\n        <ImAngry size=\"100\" color=\"tomato\" style={{ marginBottom: 10 }} />\n      )}\n      {feedback}\n    </Btn>\n  );\n};\n\nButton.propTypes = {\n  feedback: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const Item = styled.li`\n  &:not(:last-child) {\n    margin-right: 50px;\n  }\n`;\n","import PropTypes from 'prop-types'\nimport Button from '../Button/Button'\nimport { List, Item } from './FeedbackOptions.styles'\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  options = Object.keys(options)\n\n  return (\n    <List>\n      {options.map((option) => (\n        <Item key={option}>\n          <Button feedback={option} onClick={onLeaveFeedback} />\n        </Item>\n      ))}\n    </List>\n  )\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.shape({\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n  }).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n}\n\nexport default FeedbackOptions\n","import styled from \"@emotion/styled\";\n\nexport const Text = styled.p`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  text-align: center;\n  font-size: 18px;\n  font-weight: 500;\n  color: cornflowerblue;\n\n  & svg {\n    margin-left: 10px;\n  }\n`;\n","import { Text } from \"./Notification.styles\";\nimport { FaRegSadTear } from \"react-icons/fa\";\n\nconst Notification = () => (\n  <Text>\n    No feedback given <FaRegSadTear size=\"26\" />\n  </Text>\n);\n\nexport default Notification;\n","import { useState } from 'react'\nimport Statistics from './components/Statistics/Statistics'\nimport Section from './components/Section/Section'\nimport Container from './components/Container/Container'\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions'\nimport Notification from './components/Notification/Notification'\n\nconst App = () => {\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const handleFeedbackOptions = (e) => {\n    const feedback = e.currentTarget.dataset.feedback\n\n    switch (feedback) {\n      case 'good':\n        setGood((prevState) => prevState + 1)\n        break\n\n      case 'neutral':\n        setNeutral((prevState) => prevState + 1)\n        break\n\n      case 'bad':\n        setBad((prevState) => prevState + 1)\n        break\n\n      default:\n        return\n    }\n  }\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad\n  }\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback()\n\n    return Math.round((good * 100) / total)\n  }\n\n  const totalFeedback = countTotalFeedback()\n  const positivePercentage = countPositiveFeedbackPercentage()\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <Container>\n          <FeedbackOptions\n            options={{ good, neutral, bad }}\n            onLeaveFeedback={handleFeedbackOptions}\n          />\n        </Container>\n      </Section>\n\n      <Section title=\"Statistics\">\n        <Container>\n          {totalFeedback > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={totalFeedback}\n              positivePercentage={positivePercentage}\n            />\n          ) : (\n            <Notification message=\"No feedback given\"></Notification>\n          )}\n        </Container>\n      </Section>\n    </>\n  )\n}\n\n// class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   }\n\n// handleFeedbackOptions = (e) => {\n//   const feedback = e.currentTarget.dataset.feedback\n\n//   this.setState((prevState) => {\n//     return { [feedback]: prevState[feedback] + 1 }\n//   })\n// }\n\n// countTotalFeedback() {\n//   const feedbacksAmount = Object.values(this.state)\n\n//   return feedbacksAmount.reduce((acc, value) => acc + value)\n// }\n\n// countPositiveFeedbackPercentage() {\n//   const total = this.countTotalFeedback()\n//   const { good } = this.state\n\n//   return Math.round((good * 100) / total)\n// }\n\n//   render() {\n//     const { good, neutral, bad } = this.state\n//     const totalFeedback = this.countTotalFeedback()\n//     const positivePercentage = this.countPositiveFeedbackPercentage()\n\n// return (\n//   <>\n//     <Section title=\"Please leave feedback\">\n//       <Container>\n//         <FeedbackOptions\n//           options={this.state}\n//           onLeaveFeedback={this.handleFeedbackOptions}\n//         />\n//       </Container>\n//     </Section>\n\n//     <Section title=\"Statistics\">\n//       <Container>\n//         {totalFeedback > 0 ? (\n//           <Statistics\n//             good={good}\n//             neutral={neutral}\n//             bad={bad}\n//             total={totalFeedback}\n//             positivePercentage={positivePercentage}\n//           />\n//         ) : (\n//           <Notification message=\"No feedback given\"></Notification>\n//         )}\n//       </Container>\n//     </Section>\n//   </>\n// )\n//   }\n// }\n\nexport default App\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}